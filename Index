<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Stuffed Animal Capture Game</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <!-- Leaflet CSS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css">
  <style>
    /* Basic Reset & Layout */
    body, html {
      margin: 0;
      padding: 0;
      height: 100%;
      font-family: Arial, sans-serif;
      background: #f0f0f0;
    }
    /* Map Container – using 70% of viewport height */
    #map {
      height: 70vh;
      width: 100%;
    }
    /* Capture Overlay */
    #captureOverlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.9);
      color: #fff;
      display: none;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 20px;
      box-sizing: border-box;
      z-index: 4000;
    }
    #captureContent {
      background: #222;
      padding: 20px;
      border: 2px solid #fff;
      border-radius: 8px;
      text-align: center;
      max-width: 90%;
    }
    #rollDisplay {
      font-size: 3em;
      margin: 20px 0;
      min-height: 60px;
    }
    button {
      padding: 10px 20px;
      margin: 10px;
      font-size: 1em;
      cursor: pointer;
      border: none;
      border-radius: 5px;
      background-color: #4CAF50;
      color: #fff;
    }
    #closeCapture {
      background-color: #f44336;
    }
    /* Collection Display */
    #collection {
      padding: 10px;
      background: #fff;
      border-top: 2px solid #ccc;
      text-align: center;
    }
    #collection h2 {
      margin-top: 0;
    }
    .stuffy-img {
      width: 50px;
      height: auto;
      margin: 5px;
      border: 1px solid #ccc;
      border-radius: 5px;
    }
    /* Player Marker (Blinking Circle) – 10×10px */
    .blinking-circle {
      width: 10px;
      height: 10px;
      background: rgba(0,0,255,0.6);
      border: 1px solid white;
      border-radius: 50%;
      box-shadow: 0 0 3px 1px rgba(0,0,255,0.5);
      animation: blink 1s infinite;
    }
    @keyframes blink {
      0% { opacity: 1; }
      50% { opacity: 0.2; }
      100% { opacity: 1; }
    }
    /* Stuffy Marker Icon – 10×10px */
    .stuffy-icon {
      width: 10px;
      height: 10px;
      border: 1px solid #000;
      border-radius: 50%;
      background: pink;
    }
    /* Interaction Circle */
    .interaction-circle {
      stroke: blue;
      fill: blue;
      fill-opacity: 0.2;
    }
  </style>
</head>
<body>
  <!-- Map Container -->
  <div id="map"></div>
  
  <!-- Capture Overlay -->
  <div id="captureOverlay">
    <div id="captureContent">
      <h2 id="stuffyName">Stuffy</h2>
      <p id="stuffyDescription">A cuddly stuffed animal waiting to be captured!</p>
      <img id="stuffyImage" src="" alt="Stuffy" style="width:150px; margin-bottom:20px;">
      <div id="rollDisplay">--</div>
      <button id="rollCaptureBtn">Roll Capture</button>
      <button id="closeCapture">Cancel</button>
      <p id="captureResult"></p>
    </div>
  </div>
  
  <!-- Collection Display -->
  <div id="collection">
    <h2>Your Collection</h2>
    <div id="collectionDisplay">No stuffed animals captured yet.</div>
  </div>
  
  <!-- Leaflet JS -->
  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <script>
    /***** GLOBAL VARIABLES *****/
    let currentStuffy = null; // Currently selected stuffy for capture
    const captureThreshold = 50; // Capture succeeds if roll <= 50

    // Stuffy image URL from your GitHub (ensure the repository is public)
    const stuffyImageUrl = "https://raw.githubusercontent.com/black6ja/TRPG/main/gladiator.png";

    /***** SET UP LEAFLET MAP & GEOPOSITIONING *****/
    var defaultLat = 51.505, defaultLng = -0.09;
    var map = L.map('map').setView([defaultLat, defaultLng], 15);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19,
      attribution: '© OpenStreetMap'
    }).addTo(map);

    // Create player marker (blinking circle)
    var playerIcon = L.divIcon({
      className: '',
      html: '<div class="blinking-circle"></div>',
      iconSize: [10,10],
      iconAnchor: [5,5]
    });
    var playerMarker = L.marker([defaultLat, defaultLng], {icon: playerIcon}).addTo(map);

    // Define an interaction radius (230 m ≈ 250 yards)
    var interactionRadius = 230;
    var interactionCircle = L.circle(playerMarker.getLatLng(), {
      radius: interactionRadius,
      className: 'interaction-circle'
    }).addTo(map);

    // Update player marker and circle on geolocation updates
    if (navigator.geolocation) {
      navigator.geolocation.watchPosition(function(position) {
        var lat = position.coords.latitude;
        var lng = position.coords.longitude;
        var newLatLng = [lat, lng];
        playerMarker.setLatLng(newLatLng);
        interactionCircle.setLatLng(newLatLng);
      }, function(error) {
        console.error("Geolocation error: " + error.message);
      }, {enableHighAccuracy: true, maximumAge: 3000, timeout: 5000});
    }

    /***** SPAWN STUFFED ANIMAL (STUFFY) MARKERS *****/
    // Define a custom icon for stuffed animals
    var stuffyIcon = L.divIcon({
      className: '',
      html: '<div class="stuffy-icon"></div>',
      iconSize: [10, 10],
      iconAnchor: [5, 5]
    });
    var stuffyMarkers = [];
    // Use a 1‑mile radius (~1/69 degrees) for dense spawns
    var spawnRadiusDegrees = 1 / 69;  // ~0.0145 degrees

    // Helper: Generate a random point within a radius (in degrees)
    function randomPointInRadius(lat, lng, radius) {
      var r = radius * Math.sqrt(Math.random());
      var theta = Math.random() * 2 * Math.PI;
      var dLat = r * Math.cos(theta);
      var dLng = r * Math.sin(theta) / Math.cos(lat * Math.PI/180);
      return [lat + dLat, lng + dLng];
    }

    // Return a random stuffed animal object
    function getRandomStuffy() {
      return {
        id: Date.now(), // Unique ID based on timestamp
        name: "Cuddly Stuffy",
        captureThreshold: captureThreshold,
        image: stuffyImageUrl,
        description: "A cute stuffed animal waiting to be captured!"
      };
    }

    // Generate initial stuffed animal markers
    function generateInitialStuffyMarkers(baseLat, baseLng) {
      for (let i = 0; i < 20; i++) {
        var point = randomPointInRadius(baseLat, baseLng, spawnRadiusDegrees);
        var stuffyData = getRandomStuffy();
        var marker = L.marker(point, {icon: stuffyIcon}).addTo(map);
        // When a marker is clicked, check if it’s in range and then start capture
        marker.on('click', function() {
          var playerPos = playerMarker.getLatLng();
          var markerPos = marker.getLatLng();
          if (playerPos.distanceTo(markerPos) <= interactionRadius) {
            startCapture(stuffyData, marker);
          } else {
            alert("That stuffed animal is out of range. Move closer to capture it.");
          }
        });
        stuffyMarkers.push(marker);
      }
    }

    // Initialize markers when geolocation is available
    navigator.geolocation.getCurrentPosition(function(position) {
      var lat = position.coords.latitude;
      var lng = position.coords.longitude;
      map.setView([lat, lng], 15);
      playerMarker.setLatLng([lat, lng]);
      interactionCircle.setLatLng([lat, lng]);
      generateInitialStuffyMarkers(lat, lng);
    }, function(error) {
      console.error("Error getting initial position: " + error.message);
      generateInitialStuffyMarkers(defaultLat, defaultLng);
    });

    /***** CAPTURE OVERLAY FUNCTIONALITY *****/
    var captureOverlay = document.getElementById("captureOverlay");
    var stuffyNameEl = document.getElementById("stuffyName");
    var stuffyDescriptionEl = document.getElementById("stuffyDescription");
    var stuffyImageEl = document.getElementById("stuffyImage");
    var rollDisplayEl = document.getElementById("rollDisplay");
    var captureResultEl = document.getElementById("captureResult");
    var rollCaptureBtn = document.getElementById("rollCaptureBtn");
    var closeCaptureBtn = document.getElementById("closeCapture");

    // Function to start the capture overlay for a selected stuffed animal
    // 'marker' is passed so it can be removed if the capture succeeds.
    function startCapture(stuffy, marker) {
      currentStuffy = stuffy;
      // Populate overlay with stuffy details
      stuffyNameEl.textContent = stuffy.name;
      stuffyDescriptionEl.textContent = stuffy.description;
      stuffyImageEl.src = stuffy.image;
      rollDisplayEl.textContent = "--";
      captureResultEl.textContent = "";
      captureOverlay.style.display = "flex";
      
      rollCaptureBtn.onclick = function() {
        rollCaptureBtn.disabled = true;
        captureResultEl.textContent = "Rolling...";
        // Animate a roll from 1 to 100 over 2 seconds
        animateRoll(100, 2000, function(finalRoll) {
          rollDisplayEl.textContent = finalRoll;
          if (finalRoll <= stuffy.captureThreshold) {
            captureResultEl.textContent = `Success! (Roll: ${finalRoll})`;
            // Save the captured stuffy
            saveCapturedStuffy(stuffy);
            // Remove the marker from the map
            map.removeLayer(marker);
          } else {
            captureResultEl.textContent = `Capture failed. (Roll: ${finalRoll})`;
          }
          // Re-enable button and hide overlay after a delay
          setTimeout(function() {
            rollCaptureBtn.disabled = false;
            captureOverlay.style.display = "none";
          }, 2000);
        });
      };
      
      closeCaptureBtn.onclick = function() {
        captureOverlay.style.display = "none";
      };
    }

    // Animate a roll from 1 to 'maxValue' with a wheel-of-fortune effect
    function animateRoll(maxValue, duration, callback) {
      var startTime = Date.now();
      var interval = setInterval(function() {
        rollDisplayEl.textContent = Math.floor(Math.random() * maxValue) + 1;
        if (Date.now() - startTime > duration) {
          clearInterval(interval);
          var finalRoll = Math.floor(Math.random() * maxValue) + 1;
          rollDisplayEl.textContent = finalRoll;
          callback(finalRoll);
        }
      }, 100);
    }

    // Save the captured stuffy to localStorage
    function saveCapturedStuffy(stuffy) {
      let collection = JSON.parse(localStorage.getItem("capturedStuffies") || "[]");
      stuffy.capturedAt = new Date().toISOString();
      collection.push(stuffy);
      localStorage.setItem("capturedStuffies", JSON.stringify(collection));
      updateCollectionDisplay();
    }

    // Update the display of captured stuffed animals
    function updateCollectionDisplay() {
      const collectionDisplay = document.getElementById("collectionDisplay");
      let collection = JSON.parse(localStorage.getItem("capturedStuffies") || "[]");
      if (collection.length === 0) {
        collectionDisplay.textContent = "No stuffed animals captured yet.";
      } else {
        collectionDisplay.innerHTML = "";
        collection.forEach(stuffy => {
          let container = document.createElement("div");
          container.style.display = "inline-block";
          container.style.margin = "5px";
          let img = document.createElement("img");
          img.src = stuffy.image;
          img.alt = stuffy.name;
          img.className = "stuffy-img";
          container.appendChild(img);
          collectionDisplay.appendChild(container);
        });
      }
    }
    
    // Load the collection on page load
    updateCollectionDisplay();
  </script>
</body>
</html>
